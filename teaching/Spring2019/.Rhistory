99,
62,
99,
95,
84,
61,
85,
99,
78,
67)
summary(score)
getwd()
install.packages(c("CCA", "gstat", "spacetime"))
install.packages("spacetime")
library("dplyr")
library("tidyr")
library("STRbook")
?acf2
library(astsa)
?acf2
?ARMAacf
x = arima.sim(list(order = c(1,0,1), ar=0.6, ma = -0.8), n = 100)
plot(ARMAacf(x))
ARMAacf(x)
acf2(x)
ARMAacf(c(1.0, -0.25), 1.0, lag.max = 10)
plot(ARMAacf(c(1.0, -0.25), 1.0, lag.max = 10)
)
plot(acf(x))
x
library(dplyr)
library(ggplot2)
library(grDevices)
library(grid)
library(gridExtra)
library(maptools)
library(plyr)
library(rgdal)
library(rgeos)
load('us_data.rda')
load('us_geo.rda')
us <- us_geo
us_pov <- us_data
qnt1_r <- quantile(us_pov$pov_rate, c(.3333))
qnt2_r <- quantile(us_pov$pov_rate, c(.6666))
qnt3_r <- quantile(us_pov$pov_rate, c(1))
qnt1_m <- quantile(us_pov$pov_moe, c(.3333))
qnt2_m <- quantile(us_pov$pov_moe, c(.6666))
qnt3_m <- quantile(us_pov$pov_moe, c(1))
f <- colorRamp(c("#CCCCFF", "#0000FF"))
g <- colorRamp(c("#FFFFCC", "#FFFF00"))
vec1 <- c(0, .5, 1, 0, .5, 1, 0, .5, 1)
vec2 <- c(0, 0, 0, .5, .5, .5, 1, 1, 1)
xy <- cbind(vec1,vec2)
xy <- as.data.frame(xy)
one <- f(xy$vec1)
two <- g(xy$vec2)
both <- as.data.frame(cbind(one, two))
colnames(both) <- c("r1", "g1", "b1", "r2", "g2", "b2")
both$r.ave <- round((both$r1 + both$r2)/2)
both$g.ave <- round((both$g1 + both$g2)/2)
both$b.ave <- round((both$b1 + both$b2)/2)
both$ave <- paste(both$r.ave, both$g.ave, both$b.ave)
colors <- both$ave
colors <- sapply(strsplit(colors, " "),
function(colors) rgb(colors[1], colors[2], colors[3], maxColorValue = 255))
xy <- expand.grid(x=seq(1, 3, by=1), y=seq(1, 3, by=1))
grid <- cbind(xy, colors)
grid$colors <- as.character(grid$colors)
us_pov$hex_code <-
ifelse(us_pov$pov_rate<=qnt1_r & us_pov$pov_moe<=qnt1_m, colors[1],
ifelse(us_pov$pov_rate<=qnt1_r & us_pov$pov_moe<=qnt2_m, colors[4],
ifelse(us_pov$pov_rate<=qnt1_r & us_pov$pov_moe<=qnt3_m, colors[7],
ifelse(us_pov$pov_rate<=qnt2_r & us_pov$pov_moe<=qnt1_m, colors[2],
ifelse(us_pov$pov_rate<=qnt2_r & us_pov$pov_moe<=qnt2_m, colors[5],
ifelse(us_pov$pov_rate<=qnt2_r & us_pov$pov_moe<=qnt3_m, colors[8],
ifelse(us_pov$pov_rate<=qnt3_r & us_pov$pov_moe<=qnt1_m, colors[3],
ifelse(us_pov$pov_rate<=qnt3_r & us_pov$pov_moe<=qnt2_m, colors[6],
ifelse(us_pov$pov_rate<=qnt3_r & us_pov$pov_moe<=qnt3_m, colors[9], "NA")))))))))
colnames(us_pov)[1] <- "GEO_ID"
us@data <- left_join(us@data, us_pov, by="GEO_ID")
us@data$id <- rownames(us@data)
points <- fortify(us, region="id")
final_pov <- join(points, us@data, by="id")
terciles <- c(min(us_pov$pov_rate), qnt1_r, qnt2_r, qnt3_r,
min(us_pov$pov_moe), qnt1_m, qnt2_m, qnt3_m)
x <- c(.5, 1.5, 2.5, 3.5, 0, 0, 0, 0)
y <- c(0, 0, 0, 0, .5, 1.5, 2.5, 3.5)
angle <- c(-90, -90, -90, -90, 180, 180, 180, 180)
labels <- data.frame(x, y, terciles, angle)
labels$terciles <- as.character(labels$terciles)
color.grid <- ggplot() +
geom_tile(data=grid, aes(x=x, y=y, fill=colors), colour="black", size=.1) +
scale_fill_identity() +
scale_y_continuous(trans="reverse") +
coord_equal(ratio=1) +
geom_text(aes(x=-1, y=2, label="Margin of error \n (terciles)", angle=-90), size=2.5) +
geom_text(aes(x=2, y=-1, label="Poverty rate \n (terciles)", angle=180), size=2.5) +
geom_text(data=labels, aes(x=x, y=y, label=terciles, angle=angle), size=2.5) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),axis.title.y=element_blank(),
panel.background=element_blank())
states <- map_data("state")
map <- ggplot() +
geom_polygon(data=final_pov, aes(x=long, y=lat, group=group, fill=hex_code),
colour="black", size=.1) +
scale_fill_identity() +
labs(title="United States 2015 Poverty Map", subtitle = "Percentage of families whose income
was below the poverty level") +
geom_path(data=states, aes(x=long, y=lat, group=group), size=.3) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),axis.title.y=element_blank(),
panel.background=element_blank(), plot.title = element_text(size = 20),
plot.subtitle = element_text(size=15)) +
coord_equal(ratio=1.3)
cg <- editGrob(ggplotGrob(color.grid), vp=viewport(angle=135))
lay <- rbind(c(1,1,1,1,1),
c(1,1,1,1,1),
c(1,1,1,1,2),
c(1,1,1,1,1))
dev.new(dev.new())
plot <- grid.arrange(map, cg, layout_matrix=lay)
### Covariance Functions
library(fields)
?matern.image.cov
# check out the Matern
grid<- list( x= seq(-105,-99,,64), y= seq( 40,45,,64))
cov.obj<- matern.image.cov(
setup=TRUE, grid=grid, theta=.55, smoothness=1.0)
Y<- matrix(0,64,64)
Y[16,16]<- 1
result<- matern.image.cov( Y= Y,cov.obj=cov.obj)
temp<-  matrix( result, cov.obj$m,cov.obj$n)
image.plot( cov.obj$grid$x,cov.obj$grid$y, temp)
# Note we have centered at the location (grid$x[16],grid$y[16]) for this case
#  using sim.rf to simulate an Matern field
look<- sim.rf( cov.obj)
image.plot( grid$x, grid$y, look)
grid<- list( x= seq(-105,-99,,64), y= seq( 40,45,,64))
cov.obj<- matern.image.cov( grid=grid, theta=.55, smoothness=1.0)
?sim.rf
#########
#Simulate a Gaussian random field with an exponential covariance function,
#range parameter = 2.0 and the domain is  [0,5]X [0,5] evaluating the
#field at a 100X100 grid.
grid<- list( x= seq( 0,5,,100), y= seq(0,5,,100))
obj<-Exp.image.cov( grid=grid, theta=.5, setup=TRUE)
look<- sim.rf( obj)
# Now simulate another ...
look2<- sim.rf( obj)
# Suppose one requires an exponential, range = 2
# but marginal variance = 10 ( rho in fields notation)
look3<- sqrt( 10)*  sim.rf( obj)
# take a look at first two
set.panel(2,1)
image.plot( grid$x, grid$y, look)
title("simulated gaussian fields")
image.plot( grid$x, grid$y, look2)
matern.image.cov()
grid<- list( x= seq( 0,5,,100), y= seq(0,5,,100))
obj<-matern.image.cov( grid=grid, theta=.5, nu=0.5, setup=TRUE)
grid<- list( x= seq( 0,5,,100), y= seq(0,5,,100))
obj<-matern.image.cov( grid=grid, theta=.5, smoothness=0.5, setup=TRUE)
look<- sim.rf( obj)
# Now simulate another ...
look2<- sim.rf( obj)
# Suppose one requires an exponential, range = 2
# but marginal variance = 10 ( rho in fields notation)
look3<- sqrt( 10)*  sim.rf( obj)
# take a look at first two
set.panel(2,2)
set.panel(2,2)
image.plot( grid$x, grid$y, look)
title("simulated gaussian fields")
image.plot( grid$x, grid$y, look2)
title("another realization ...")
image.plot( grid$x, grid$y, look3)
title("scaled")
?image.plot
image.plot( grid$x, grid$y, look, add=F)
x<- 1:10
y<- 1:15
z<- outer( x,y,"+")
image.plot(x,y,z)
# or
obj<- list( x=x,y=y,z=z)
image.plot(obj, legend.lab="Sverdrups")
# add some points on diagonal using standard plot function
#(with some clipping beyond 10 anticipated)
points( 5:12, 5:12, pch="X", cex=3)
# adding breaks and distinct colors for intervals of z
# with and without lab.breaks
brk<- quantile( c(z))
image.plot(x,y,z, breaks=brk, col=rainbow(4))
# annotate legend strip  at break values and add a label
image.plot(x,y,z, breaks=brk, col=rainbow(4),
lab.breaks=names(brk))
#
# compare to
zp <-quantile(c(z), c( .05, .1,.5, .9,.95))
image.plot(x,y,z,
axis.args=list( at=zp, labels=names(zp) ) )
# a log scaling for the colors
ticks<- c( 1, 2,4,8,16,32)
image.plot(x,y,log(z), axis.args=list( at=log(ticks), labels=ticks))
# see help file for designer.colors to generate a color scale that adapts to
# quantiles of z.
# Two add some color scales together here is an example of  5 blues to white to 5 reds
# with white being a specific size.
colorTable<- designer.colors(11, c( "blue","white", "red") )
# breaks with a gap of 10 to 17 assigned the white color
brks<- c(seq( 1, 10,,6), seq( 17, 25,,6))
image.plot( x,y,z,breaks=brks, col=colorTable)
#
#fat (5 characters wide) and short (50% of figure)  color bar on the bottom
image.plot( x,y,z,legend.width=5, legend.shrink=.5, horizontal=TRUE)
image.plot(x,y,z,
legend.args=list( text="unknown units",
col="magenta", cex=1.5, side=4, line=2))
#### example using a irregular quadrilateral grid
data( RCMexample)
image.plot( RCMexample$x, RCMexample$y, RCMexample$z[,,1])
ind<- 50:75 # make a smaller image to show bordering lines
image.plot( RCMexample$x[ind,ind], RCMexample$y[ind,ind], RCMexample$z[ind,ind,1],
border="grey50", lwd=2)
set.panel()
par(oma=c( 0,0,0,4)) # margin of 4 spaces width at right hand side
set.panel( 2,2) # 2X2 matrix of plots
# now draw all your plots using usual image command
for (  k in 1:4){
data<- matrix( rnorm(150), 10,15)
image( data, zlim=c(-4,4), col=tim.colors())
# and just for fun add a contour plot
contour( data, add=TRUE)
}
par(oma=c( 0,0,0,1))# reset margin to be much smaller.
image.plot( legend.only=TRUE, zlim=c(-4,4))
set.panel() # reset plotting device
dev.off()
par(oma=c( 0,0,0,4)) # margin of 4 spaces width at right hand side
set.panel( 2,2) # 2X2 matrix of plots
# now draw all your plots using usual image command
for (  k in 1:4){
data<- matrix( rnorm(150), 10,15)
image( data, zlim=c(-4,4), col=tim.colors())
# and just for fun add a contour plot
contour( data, add=TRUE)
}
par(oma=c( 0,0,0,1))# reset margin to be much smaller.
image.plot( legend.only=TRUE, zlim=c(-4,4))
set.panel() # reset plotting device
image.plot( grid$x, grid$y, look, legend.only = T)
?seq
#########
#Simulate a Gaussian random field with an exponential covariance function,
#range parameter = 2.0 and the domain is  [0,5]X [0,5] evaluating the
#field at a 100X100 grid.
grid = list( x= seq( 0,5,length.out=100), y= seq(0,5,length.out=100))
obj<-Exp.image.cov( grid=grid, theta=.5, setup=TRUE)
look<- sim.rf( obj)
#field at a 100X100 grid.
grid = list( x= seq( 0,5,length.out=100), y= seq(0,5,length.out=100))
obj1<-Exp.image.cov( grid=grid, theta=.5, setup=TRUE)
look1<- sim.rf( obj1)
# Now change the smoothness
obj2<-Exp.image.cov( grid=grid, theta=1, setup=TRUE)
look2<- sim.rf( obj2)
obj3<-Exp.image.cov( grid=grid, theta=2, setup=TRUE)
look3<- sim.rf( obj3)
obj4<-Exp.image.cov( grid=grid, theta=100, setup=TRUE)
look4<- sim.rf( obj4)
grid<- list( x= seq( 0,5,length.out = 100), y= seq(0,5,length.out = 100))
obj1<-matern.image.cov( grid=grid, theta=.5, smoothness=.5, setup=TRUE)
look1<- sim.rf( obj1)
# Now change the smoothness
obj2<-matern.image.cov( grid=grid, theta=.5, smoothness=1, setup=TRUE)
look2<- sim.rf( obj2)
obj3<-matern.image.cov( grid=grid, theta=.5, smoothness=2, setup=TRUE)
look3<- sim.rf( obj3)
obj4<-matern.image.cov( grid=grid, theta=.5, smoothness=100, setup=TRUE)
obj3<-matern.image.cov( grid=grid, theta=1, smoothness=2, setup=TRUE)
obj3<-matern.image.cov( grid=grid, theta=.5, smoothness=2, setup=TRUE)
look3<- sim.rf( obj3)
obj4<-matern.image.cov( grid=grid, theta=.5, smoothness=100, setup=TRUE)
look4<- sim.rf( obj4)
?matern.image.cov
grid<- list( x= seq( 0,5,length.out = 100), y= seq(0,5,length.out = 100))
obj1<-matern.image.cov( grid=grid, theta=1, smoothness=.5, setup=TRUE)
look1<- sim.rf( obj1)
# Now change the smoothness
obj2<-matern.image.cov( grid=grid, theta=1, smoothness=1, setup=TRUE)
look2<- sim.rf( obj2)
obj3<-matern.image.cov( grid=grid, theta=1, smoothness=2, setup=TRUE)
look3<- sim.rf( obj3)
obj4<-matern.image.cov( grid=grid, theta=1, smoothness=100, setup=TRUE)
look4<- sim.rf( obj4)
grid<- list( x= seq( 0,10,length.out = 100), y= seq(0,10,length.out = 100))
obj1<-matern.image.cov( grid=grid, theta=1, smoothness=.5, setup=TRUE)
look1<- sim.rf( obj1)
# Now change the smoothness
obj2<-matern.image.cov( grid=grid, theta=1, smoothness=1, setup=TRUE)
look2<- sim.rf( obj2)
obj3<-matern.image.cov( grid=grid, theta=1, smoothness=2, setup=TRUE)
look3<- sim.rf( obj3)
obj4<-matern.image.cov( grid=grid, theta=1, smoothness=100, setup=TRUE)
look4<- sim.rf( obj4)
# take a look at first two
set.panel(2,2)
image.plot( grid$x, grid$y, look1)
title("Matern 0.5")
image.plot( grid$x, grid$y, look2)
title("Matern 1")
obj3<-matern.image.cov( grid=grid, theta=1, smoothness=2, setup=TRUE)
look3<- sim.rf( obj3)
obj4<-wendland.image.cov( grid=grid, delta=1, setup=TRUE)
obj4<-wendland.image.cov( grid=grid, setup=TRUE)
grid
obj2
obj4<-wendland.image.cov( grid=grid, theta=10, setup=TRUE)
wendland.image.cov()
wendland.image.cov
obj4<-wendland.image.cov( grid=grid, theta=2, setup=TRUE)
obj4<-wendland.image.cov( grid=grid)
rm(list=ls())
library(fields)
grid<- list( x= seq( 0,10,length.out = 100), y= seq(0,10,length.out = 100))
obj4<-wendland.image.cov( grid=grid, theta=2, setup=TRUE)
wendland.image.cov
grid<- list( x= seq( 0,10,length.out = 10), y= seq(0,10,length.out = 10))
obj4<-wendland.image.cov( grid=grid, theta=2, setup=TRUE)
obj4<-wendland.image.cov( ind1=seq( 0,10,length.out = 10), ind2 = seq( 0,10,length.out = 10), theta=2, setup=TRUE)
grid<- list( x= seq( 0,10,length.out = 30), y= seq(0,10,length.out = 30))
obj1<-matern.image.cov( grid=grid, theta=1, smoothness=.5, setup=TRUE)
look1<- sim.rf( obj1)
dev.off()
image.plot( grid$x, grid$y, look1)
grid<- list( x= seq( 0,10,length.out = 300), y= seq(0,10,length.out = 300))
obj1<-matern.image.cov( grid=grid, theta=1, smoothness=.5, setup=TRUE)
look1<- sim.rf( obj1)
image.plot( grid$x, grid$y, look1)
obj2<-matern.image.cov( grid=grid, theta=1, smoothness=1, setup=TRUE)
look2<- sim.rf( obj2)
image.plot( grid$x, grid$y, look2)
obj3<-matern.image.cov( grid=grid, theta=5, smoothness=1, setup=TRUE)
look3<- sim.rf( obj3)
obj3<-matern.image.cov( grid=grid, theta=2, smoothness=1, setup=TRUE)
look3<- sim.rf( obj3)
obj3<-matern.image.cov( grid=grid, theta=.5, smoothness=1, setup=TRUE)
look3<- sim.rf( obj3)
image.plot( grid$x, grid$y, look3)
grid<- list( x= seq( 0,10,length.out = 100), y= seq(0,10,length.out = 100))
obj1<-matern.image.cov( grid=grid, theta=1, smoothness=.5, setup=TRUE)
look1<- sim.rf( obj1)
image.plot( grid$x, grid$y, look1)
obj2<-matern.image.cov( grid=grid, theta=1, smoothness=1, setup=TRUE)
look2<- sim.rf( obj2)
image.plot( grid$x, grid$y, look2)
obj3<-matern.image.cov( grid=grid, theta=.5, smoothness=1, setup=TRUE)
look3<- sim.rf( obj3)
image.plot( grid$x, grid$y, look3)
obj3<-matern.image.cov( grid=grid, theta=1.5, smoothness=1, setup=TRUE)
look3<- sim.rf( obj3)
summary(obj1)
?sim.rf
obj3<-matern.image.cov( grid=grid, theta=1.5, smoothness=2, setup=TRUE)
look3<- sim.rf( obj3)
obj3<-matern.image.cov( grid=grid, theta=.5, smoothness=2, setup=TRUE)
look3<- sim.rf( obj3)
image.plot( grid$x, grid$y, look3)
obj1<-matern.image.cov( grid=grid, theta=.5, smoothness=.5, setup=TRUE)
look1<- sim.rf( obj1)
image.plot( grid$x, grid$y, look1)
obj2<-matern.image.cov( grid=grid, theta=.5, smoothness=1, setup=TRUE)
look2<- sim.rf( obj2)
image.plot( grid$x, grid$y, look2)
obj3<-matern.image.cov( grid=grid, theta=.5, smoothness=2, setup=TRUE)
look3<- sim.rf( obj3)
image.plot( grid$x, grid$y, look3)
grid<- list( x= seq( 0,10,length.out = 200), y= seq(0,10,length.out = 200))
obj1<-matern.image.cov( grid=grid, theta=.5, smoothness=.5, setup=TRUE)
look1<- sim.rf( obj1)
image.plot( grid$x, grid$y, look1)
obj2<-matern.image.cov( grid=grid, theta=.5, smoothness=1, setup=TRUE)
look2<- sim.rf( obj2)
image.plot( grid$x, grid$y, look2)
obj3<-matern.image.cov( grid=grid, theta=.5, smoothness=2, setup=TRUE)
look3<- sim.rf( obj3)
image.plot( grid$x, grid$y, look3)
obj3<-matern.image.cov( grid=grid, theta=.5, smoothness=20, setup=TRUE)
look3<- sim.rf( obj3)
obj3<-matern.image.cov( grid=grid, theta=.05, smoothness=20, setup=TRUE)
look3<- sim.rf( obj3)
set.panel(1,3)
image.plot( grid$x, grid$y, look1)
title("Matern 0.5")
image.plot( grid$x, grid$y, look2)
title("Matern 1")
image.plot( grid$x, grid$y, look3)
title("Matern 2 ")
obj4<-wendland.image.cov( theta=2, setup=TRUE)
obj4<-wendland.image.cov( theta=.5, setup=TRUE)
obj4<-wendland.image.cov( grid=grid, theta=.5, setup=TRUE)
obj4<-wendland.image.cov( grid=grid, theta=.01, setup=TRUE)
# take a look at first two
set.panel(1,3)
image.plot( grid$x, grid$y, look1)
title("Matern, nu=0.5")
image.plot( grid$x, grid$y, look2)
title("Matern, nu=1")
image.plot( grid$x, grid$y, look3)
title("Matern, nu=2 ")
?Matern
Matern( d, nu=.5)
### Matern covariance function
d<- seq( 0, 15,,200)
Matern( d, nu=.5)
### Matern covariance function
d<- seq( 0, 15,,200)
y<- cbind(  Matern( d, nu=.5),
Matern( d, nu=1.0),
Matern( d, nu=2.0),
Matern( d, nu=100))
matplot( d, y, type="l", lty=1, lwd=2)
y<- cbind(  Matern( d, nu=.5),
Matern( d, nu=1.0),
Matern( d, nu=2.0))
matplot( d, y, type="l", lty=1, lwd=2)
dev.off()
matplot( d, y, type="l", lty=1, lwd=2, main='Matern with range 1')
?legend
?matplot
matplot( d, y, type="l", lty=1, lwd=2, col=1:3, main='Matern with range 1')
legend('topright', legend=c('nu=0.5', 'nu=1', 'nu=2'), col=1:3)
legend('topright', legend=c('nu=0.5', 'nu=1', 'nu=2'), col=1:3, lty=1)
legend('topright', legend=c('nu=0.5', 'nu=1', 'nu=2'), col=1:3, lty=1, lwd=2)
?Matern
z<- cbind(  Matern( d, range=1),
Matern( d, range=2),
Matern( d, range=3))
matplot( d, z, type="l", lty=1, lwd=2, col=1:3, main='Matern with smoothness ,5')
legend('topright', legend=c('range=1', 'range=2', 'range=3'), col=1:3, lty=1, lwd=2)
##############
### Matern covariance function
d<- seq( 0, 15,length.out = 200)
y<- cbind(  Matern( d, nu=.5),
Matern( d, nu=1.0),
Matern( d, nu=2.0))
z<- cbind(  Matern( d, range=1),
Matern( d, range=2),
Matern( d, range=3))
set.panel(1,2)
matplot( d, y, type="l", lty=1, lwd=2, col=1:3, main='Matern with range 1')
legend('topright', legend=c('nu=0.5', 'nu=1', 'nu=2'), col=1:3, lty=1, lwd=2)
matplot( d, z, type="l", lty=1, lwd=2, col=1:3, main='Matern with smoothness 0.5')
legend('topright', legend=c('range=1', 'range=2', 'range=3'), col=1:3, lty=1, lwd=2)
dev.off()
##############
### 1D GP with Matern
set.seed(123)
d<- seq( 0, 10,length.out =  200)
nu=.5 # 1 1.5
range=1
my.Matern=function(d1,d2){
Matern(abs(d1-d2), range=range, nu=nu)
}
my.cov=outer (d,d, my.Matern)
gp = mvrnorm(3, mu=rep(0, length(d)), Sigma = my.cov)
my.gp = data.frame(x=d,y=t(gp))
ggplot(my.gp, aes(x=x))+
geom_line(aes(y = y.1, colour = "y.1")) +
geom_line(aes(y = y.2, colour = "y.2")) +
geom_line(aes(y = y.3, colour = "y.3")) +
ylab('y') + ggtitle(paste("Matern(nu=", nu,")"))
grid<- list( x= seq( 0,10,length.out = 200), y= seq(0,10,length.out = 200))
library(MASS)
library(ggplot2)
library(fields)
##############
### 1D GP with Matern
set.seed(123)
d<- seq( 0, 10,length.out =  200)
nu=.5 # 1 1.5
range=1
my.Matern=function(d1,d2){
Matern(abs(d1-d2), range=range, nu=nu)
}
my.cov=outer (d,d, my.Matern)
gp = mvrnorm(3, mu=rep(0, length(d)), Sigma = my.cov)
my.gp = data.frame(x=d,y=t(gp))
ggplot(my.gp, aes(x=x))+
geom_line(aes(y = y.1, colour = "y.1")) +
geom_line(aes(y = y.2, colour = "y.2")) +
geom_line(aes(y = y.3, colour = "y.3")) +
ylab('y') + ggtitle(paste("Matern(nu=", nu,")"))
dev.off()
grid<- list( x= seq( 0,10,length.out = 200), y= seq(0,10,length.out = 200))
obj1<-matern.image.cov( grid=grid, theta=.5, smoothness=.5, setup=TRUE)
look1<- sim.rf( obj1)
obj2<-matern.image.cov( grid=grid, theta=.5, smoothness=1, setup=TRUE)
look2<- sim.rf( obj2)
obj3<-matern.image.cov( grid=grid, theta=.5, smoothness=2, setup=TRUE)
look3<- sim.rf( obj3)
# take a look at first two
set.panel(1,3)
image.plot( grid$x, grid$y, look1)
title("Matern, nu=0.5")
image.plot( grid$x, grid$y, look2)
title("Matern, nu=1")
image.plot( grid$x, grid$y, look3)
title("Matern, nu=2 ")
