####################
# Example 2.11 Moving Average Smoother
wgts = c(.5, rep(1,11), .5)/12
soif = filter(soi, sides=2, filter=wgts)
tsplot(soi)
lines(soif, lwd=2, col=4)
par(fig = c(.75, 1, .75, 1), new = TRUE) # the insert
nwgts = c(rep(0,20), wgts, rep(0,20))
plot(nwgts, type="l", ylim = c(-.02,.1), xaxt='n', yaxt='n', ann=FALSE)
dev.off()
####################
# Example 2.11 Moving Average Smoother
wgts = c(.5, rep(1,11), .5)/12
soif = filter(soi, sides=2, filter=wgts)
tsplot(soi)
lines(soif, lwd=2, col=4)
par(fig = c(.75, 1, .75, 1), new = TRUE) # the insert
nwgts = c(rep(0,20), wgts, rep(0,20))
plot(nwgts, type="l", ylim = c(-.02,.1), xaxt='n', yaxt='n', ann=FALSE)
wgts
####################
# Example 2.12 Kernel Smoothing
tsplot(soi)
dev.off()
####################
# Example 2.12 Kernel Smoothing
tsplot(soi)
lines(ksmooth(time(soi), soi, "normal", bandwidth=1), lwd=2, col=4)
par(fig = c(.75, 1, .75, 1), new = TRUE) # the insert
gauss = function(x) { 1/sqrt(2*pi) * exp(-(x^2)/2) }
x = seq(from = -3, to = 3, by = 0.001)
plot(x, gauss(x), type ="l", ylim=c(-.02,.45), xaxt='n', yaxt='n', ann=FALSE)
dev.off()
####################
# Example 2.13
tsplot(soi)
lines(lowess(soi, f=.05), lwd=2, col=4) # El Nino cycle
lines(lowess(soi), lty=2, lwd=2, col=2) # trend (with default span)
dev.off()
####################
# Example 2.14
tsplot(soi)
lines(smooth.spline(time(soi), soi, spar=.5), lwd=2, col=4)
lines(smooth.spline(time(soi), soi, spar= 1), lty=2, lwd=2, col=2)
dev.off()
####################
# Example 2.15
plot(tempr, cmort, xlab="Temperature", ylab="Mortality")
lines(lowess(tempr, cmort))
dev.off()
library(astsa)
####################
# Chapter 3
####################
# Example 3.2 AR(p)
par(mfrow=c(2,1))
# in the expressions below, ~ is a space and == is equal
tsplot(arima.sim(list(order=c(1,0,0), ar=.9), n=100), ylab="x", main=(expression(AR(1)~~~phi==+.9)))
tsplot(arima.sim(list(order=c(1,0,0), ar=-.9), n=100), ylab="x", main=(expression(AR(1)~~~phi==-.9)))
dev.off()
####################
# Example 3.5 MA(1)
par(mfrow=c(2,1))
tsplot(arima.sim(list(order=c(0,0,1), ma=.9), n=100), ylab="x", main=(expression(MA(1)~~~theta==+.9)))
tsplot(arima.sim(list(order=c(0,0,1), ma=-.9), n=100), ylab="x", main=(expression(MA(1)~~~theta==-.9)))
dev.off()
####################
# Example 3.11 AR(2) with complex roots
par(mfrow=c(3,1))
ACF = ARMAacf(ar=c(1,-.25), ma=0, 50)
plot(ACF, type="h", xlab="lag", main="equal real roots")
abline(h=0)
ACF = ARMAacf(ar=c(.75,-.125), ma=0, 50)
plot(ACF, type="h", xlab="lag", main="distinct real roots")
abline(h=0)
ACF = ARMAacf(ar=c(1.5,-.75), ma=0, 50)
plot(ACF, type="h", xlab="lag", main="complex roots")
abline(h=0)
dev.off()
####################
# Example 3.16 ACF and PACF of AR(p)
ar2.acf = ARMAacf(ar=c(1.5,-.75), ma=0, 24)[-1]
ar2.pacf = ARMAacf(ar=c(1.5,-.75), ma=0, 24, pacf=TRUE)
par(mfrow=c(1,2))
plot(ar2.acf, type="h", xlab="lag")
abline(h=0)
plot(ar2.pacf, type="h", xlab="lag")
abline(h=0)
dev.off()
####################
# Example 3.18 Preliminary analysis of Rec
tsplot(rec, ylab="", main="Recruitment")
acf2(rec, 48)     # will produce values and a graphic
(regr = ar.ols(rec, order=2, demean=F, intercept=TRUE))  # regression
regr$asy.se.coef  # standard errors
dev.off()
library(astsa)
####################
# March 12, 2019
####################
####################
# Example 2.1 Linear trend
summary(fit <- lm(chicken~time(chicken))) # regress price on time
tsplot(chicken, ylab="cents per pound", col=4, lwd=2)
abline(fit)           # add the fitted regression line to the plot
####################
# Example 2.2 LA pollution, temperature and mortality
par(mfrow=c(3,1))
tsplot(cmort, main="Cardiovascular Mortality", ylab="")
tsplot(tempr, main="Temperature",  ylab="")
tsplot(part, main="Particulates", ylab="")
pairs(cbind(Mortality=cmort, Temperature=tempr, Particulates=part))
## Regression
temp  = tempr-mean(tempr)  # center temperature
temp2 = temp^2             # square it
trend = time(cmort)        # time
fit = lm(cmort~ trend + temp + temp2 + part, na.action=NULL)
summary(fit)       # regression results
summary(aov(fit))  # ANOVA table   (compare to next line)
summary(fit)       # regression results
summary(aov(fit))  # ANOVA table   (compare to next line)
summary(aov(lm(cmort~cbind(trend, temp, temp2, part)))) # Table 2.1
num = length(cmort)                                     # sample size
AIC(fit)/num - log(2*pi)                                # AIC
BIC(fit)/num - log(2*pi)                                # BIC
####################
# Examples 2.3 Regression with lagged variables
fish = ts.intersect(rec, soiL6=lag(soi,-6), dframe=TRUE)
summary(fit <- lm(rec~soiL6, data=fish, na.action=NULL))
tsplot(fish$rec, ylim=c(0,111))  # plot the data and the fitted values (not shown in text)
dev.off()
####################
# Examples 2.3 Regression with lagged variables
fish = ts.intersect(rec, soiL6=lag(soi,-6), dframe=TRUE)
summary(fit <- lm(rec~soiL6, data=fish, na.action=NULL))
tsplot(fish$rec, ylim=c(0,111))  # plot the data and the fitted values (not shown in text)
lines(fitted(fit), col=2)
####################
# Examples 2.3 Regression with lagged variables
fish = ts.intersect(rec, soiL6=lag(soi,-6), dframe=TRUE)
summary(fit <- lm(rec~soiL6, data=fish, na.action=NULL))
tsplot(fish$rec, ylim=c(0,111))  # plot the data and the fitted values (not shown in text)
lines(fitted(fit), col=2)
dev.off()
####################
# Examples 2.4 and 2.5 Differencing Chicken Prices
fit = lm(chicken~time(chicken), na.action=NULL) # regress chicken on time
par(mfrow=c(2,1))
tsplot(resid(fit), main="detrended")
tsplot(diff(chicken), main="first difference")
par(mfrow=c(3,1))     # plot ACFs
acf1(chicken, 48, main="chicken")
acf1(resid(fit), 48, main="detrended")
acf1(diff(chicken), 48, main="first difference")
dev.off()
####################
# Example 2.6 Differencing Global Temperature
par(mfrow=c(3,1))
tsplot(globtemp, type="o")
tsplot(diff(globtemp), type="o")
mean(diff(globtemp))     # drift estimate = .008
acf(diff(gtemp), 48, main="")
dev.off()
####################
# Example 2.7 Paleoclimatic Glacial Varves
par(mfrow=c(2,1))
tsplot(varve, main="varve", ylab="")
tsplot(log(varve), main="log(varve)", ylab="" )
dev.off()
####################
# Example 2.8
lag1.plot(soi, 12)
lag2.plot(soi, rec, 8)
####################
# Example 2.8
lag1.plot(soi, 12)
####################
# Example 2.8
lag1.plot(soi, 12)
lag2.plot(soi, rec, 8)
dev.off()
####################
# Example 2.9
dummy = ifelse(soi<0, 0, 1)
fish  = ts.intersect(rec, soiL6=lag(soi,-6), dL6=lag(dummy,-6), dframe=TRUE)
summary(fit <- lm(rec~ soiL6*dL6, data=fish, na.action=NULL))
attach(fish)
plot(soiL6, rec)
lines(lowess(soiL6, rec), col=4, lwd=2)
points(soiL6, fitted(fit), pch='+', col=2)
tsplot(resid(fit)) # not shown ...
acf1(resid(fit))   # ... but obviously not noise
dev.off()
####################
# Example 2.10 Using Regression to Discover a Signal in Noise
set.seed(1000)  # so you can reproduce these results
x = 2*cos(2*pi*1:500/50 + .6*pi) + rnorm(500,0,5)
z1 = cos(2*pi*1:500/50)
z2 = sin(2*pi*1:500/50)
summary(fit <- lm(x~0+z1+z2))  # zero to exclude the intercept
par(mfrow=c(2,1))
tsplot(x)
tsplot(x, col=8, ylab=expression(hat(x)))
lines(fitted(fit), col=2)
dev.off()
####################
# Example 2.8
lag1.plot(soi, 12)
####################
# Example 2.8
lag1.plot(soi, 12)
dev.off()
####################
# Example 2.11 Moving Average Smoother
wgts = c(.5, rep(1,11), .5)/12
soif = filter(soi, sides=2, filter=wgts)
tsplot(soi)
lines(soif, lwd=2, col=4)
par(fig = c(.75, 1, .75, 1), new = TRUE) # the insert
nwgts = c(rep(0,20), wgts, rep(0,20))
plot(nwgts, type="l", ylim = c(-.02,.1), xaxt='n', yaxt='n', ann=FALSE)
nwgts = c(rep(0,20), wgts, rep(0,20))
plot(nwgts, type="l", ylim = c(-.02,.1), xaxt='n', yaxt='n', ann=FALSE)
dev.off()
####################
# Example 2.12 Kernel Smoothing
tsplot(soi)
lines(ksmooth(time(soi), soi, "normal", bandwidth=1), lwd=2, col=4)
par(fig = c(.75, 1, .75, 1), new = TRUE) # the insert
gauss = function(x) { 1/sqrt(2*pi) * exp(-(x^2)/2) }
x = seq(from = -3, to = 3, by = 0.001)
plot(x, gauss(x), type ="l", ylim=c(-.02,.45), xaxt='n', yaxt='n', ann=FALSE)
####################
# Example 2.12 Kernel Smoothing
tsplot(soi)
dev.off()
####################
# Example 2.12 Kernel Smoothing
tsplot(soi)
lines(ksmooth(time(soi), soi, "normal", bandwidth=10), lwd=2, col=4)
####################
# Example 2.13
tsplot(soi)
lines(lowess(soi, f=.05), lwd=2, col=4) # El Nino cycle
lines(lowess(soi), lty=2, lwd=2, col=2) # trend (with default span)
dev.off()
####################
# Example 2.14
tsplot(soi)
lines(smooth.spline(time(soi), soi, spar=.5), lwd=2, col=4)
lines(smooth.spline(time(soi), soi, spar= 1), lty=2, lwd=2, col=2)
dev.off()
####################
# Example 2.15
plot(tempr, cmort, xlab="Temperature", ylab="Mortality")
lines(lowess(tempr, cmort))
library(astsa)
####################
# Example 3.11 AR(2) with complex roots
par(mfrow=c(3,1))
ACF = ARMAacf(ar=c(1,-.25), ma=0, 50)
plot(ACF, type="h", xlab="lag", main="equal real roots")
####################
# Example 3.11 AR(2) with complex roots
par(mfrow=c(3,1))
ACF = ARMAacf(ar=c(1,-.25), ma=0, 50)
plot(ACF, type="h", xlab="lag", main="equal real roots")
abline(h=0)
ACF = ARMAacf(ar=c(.75,-.125), ma=0, 50)
plot(ACF, type="h", xlab="lag", main="distinct real roots")
abline(h=0)
ACF = ARMAacf(ar=c(1.5,-.75), ma=0, 50)
plot(ACF, type="h", xlab="lag", main="complex roots")
abline(h=0)
dev.off()
####################
# Example 3.16 ACF and PACF of AR(p)
ar2.acf = ARMAacf(ar=c(1.5,-.75), ma=0, 24)[-1]
ar2.pacf = ARMAacf(ar=c(1.5,-.75), ma=0, 24, pacf=TRUE)
par(mfrow=c(1,2))
plot(ar2.acf, type="h", xlab="lag")
abline(h=0)
plot(ar2.pacf, type="h", xlab="lag")
abline(h=0)
####################
# Example 3.12
ARMAtoMA(ar=.9, ma=.5, 50)       #  for a list
plot(ARMAtoMA(ar=.9, ma=.5, 50)) #  for a graph
####################
# Example 3.25
regr = ar.ols(rec, order=2, demean=FALSE, intercept=TRUE)
fore = predict(regr, n.ahead=24)
ts.plot(rec, fore$pred, col=1:2, xlim=c(1980,1990), ylab="Recruitment")
lines(fore$pred, type="p", col=2)
lines(fore$pred+fore$se, lty="dashed", col=4)
lines(fore$pred-fore$se, lty="dashed", col=4)
dev.off()
####################
# Example 3.18 Preliminary analysis of Rec
tsplot(rec, ylab="", main="Recruitment")
acf2(rec, 48)     # will produce values and a graphic
(regr = ar.ols(rec, order=2, demean=F, intercept=TRUE))  # regression
regr$asy.se.coef  # standard errors
dev.off()
library(astsa)
####################
# Example 3.16 ACF and PACF of AR(p)
ar2.acf = ARMAacf(ar=c(1.5,-.75), ma=0, 24)[-1]
ar2.pacf = ARMAacf(ar=c(1.5,-.75), ma=0, 24, pacf=TRUE)
par(mfrow=c(1,2))
plot(ar2.acf, type="h", xlab="lag")
abline(h=0)
plot(ar2.pacf, type="h", xlab="lag")
abline(h=0)
dev.off()
####################
# Example 3.18 Preliminary analysis of Rec
tsplot(rec, ylab="", main="Recruitment")
acf2(rec, 48)     # will produce values and a graphic
(regr = ar.ols(rec, order=2, demean=F, intercept=TRUE))  # regression
regr$asy.se.coef  # standard errors
dev.off()
?ar2.acf
?ARMAacf
library(astsa)
####################
# Example 3.25
regr = ar.ols(rec, order=2, demean=FALSE, intercept=TRUE)
fore = predict(regr, n.ahead=24)
ts.plot(rec, fore$pred, col=1:2, xlim=c(1980,1990), ylab="Recruitment")
lines(fore$pred, type="p", col=2)
lines(fore$pred+fore$se, lty="dashed", col=4)
lines(fore$pred-fore$se, lty="dashed", col=4)
library(astsa)
####################
# Example 3.16 ACF and PACF of AR(p)
ar2.acf = ARMAacf(ar=c(1.5,-.75), ma=0, 24)[-1]
ar2.pacf = ARMAacf(ar=c(1.5,-.75), ma=0, 24, pacf=TRUE)
par(mfrow=c(1,2))
plot(ar2.acf, type="h", xlab="lag")
abline(h=0)
plot(ar2.pacf, type="h", xlab="lag")
abline(h=0)
dev.off()
####################
# Example 3.18 Preliminary analysis of Rec
tsplot(rec, ylab="", main="Recruitment")
acf2(rec, 48)     # will produce values and a graphic
(regr = ar.ols(rec, order=2, demean=F, intercept=TRUE))  # regression
regr$asy.se.coef  # standard errors
dev.off()
library(astsa)
####################
# Chapter 3
####################
# Example 3.25 Forecasting the Recruitment Series
regr = ar.ols(rec, order=2, demean=FALSE, intercept=TRUE)
fore = predict(regr, n.ahead=24)
ts.plot(rec, fore$pred, col=1:2, xlim=c(1980,1990), ylab="Recruitment")
lines(fore$pred, type="p", col=2)
lines(fore$pred+fore$se, lty="dashed", col=4)
lines(fore$pred-fore$se, lty="dashed", col=4)
####################
# Example 3.28 Yule–Walker Estimation of the Recruitment Series
rec.yw = ar.yw(rec, order=2)
rec.yw$x.mean  # = 62.26278 (mean estimate)
rec.yw$ar      # = 1.3315874, -.4445447  (parameter estimates)
sqrt(diag(rec.yw$asy.var.coef))  # = .04222637, .04222637  (standard errors)
rec.yw$var.pred  # = 94.79912 (error variance estimate)
rec.pr = predict(rec.yw, n.ahead=24)
U = rec.pr$pred + rec.pr$se
rec.pr$se
####################
# Chapter 3
####################
# Example 3.25 Forecasting the Recruitment Series
regr = ar.ols(rec, order=2, demean=FALSE, intercept=TRUE)
fore = predict(regr, n.ahead=24)
ts.plot(rec, fore$pred, col=1:2, xlim=c(1980,1990), ylab="Recruitment")
lines(fore$pred, type="p", col=2)
lines(fore$pred+fore$se, lty="dashed", col=4)
lines(fore$pred-fore$se, lty="dashed", col=4)
fore
?length(fore)
length(fore)
class(fore)
regr
score=c(77,
99,
62,
99,
95,
84,
61,
85,
99,
78,
67)
summary(score)
getwd()
install.packages(c("CCA", "gstat", "spacetime"))
install.packages("spacetime")
library("dplyr")
library("tidyr")
library("STRbook")
?acf2
library(astsa)
?acf2
?ARMAacf
x = arima.sim(list(order = c(1,0,1), ar=0.6, ma = -0.8), n = 100)
plot(ARMAacf(x))
ARMAacf(x)
acf2(x)
ARMAacf(c(1.0, -0.25), 1.0, lag.max = 10)
plot(ARMAacf(c(1.0, -0.25), 1.0, lag.max = 10)
)
plot(acf(x))
x
library(dplyr)
library(ggplot2)
library(grDevices)
library(grid)
library(gridExtra)
library(maptools)
library(plyr)
library(rgdal)
library(rgeos)
load('us_data.rda')
load('us_geo.rda')
us <- us_geo
us_pov <- us_data
qnt1_r <- quantile(us_pov$pov_rate, c(.3333))
qnt2_r <- quantile(us_pov$pov_rate, c(.6666))
qnt3_r <- quantile(us_pov$pov_rate, c(1))
qnt1_m <- quantile(us_pov$pov_moe, c(.3333))
qnt2_m <- quantile(us_pov$pov_moe, c(.6666))
qnt3_m <- quantile(us_pov$pov_moe, c(1))
f <- colorRamp(c("#CCCCFF", "#0000FF"))
g <- colorRamp(c("#FFFFCC", "#FFFF00"))
vec1 <- c(0, .5, 1, 0, .5, 1, 0, .5, 1)
vec2 <- c(0, 0, 0, .5, .5, .5, 1, 1, 1)
xy <- cbind(vec1,vec2)
xy <- as.data.frame(xy)
one <- f(xy$vec1)
two <- g(xy$vec2)
both <- as.data.frame(cbind(one, two))
colnames(both) <- c("r1", "g1", "b1", "r2", "g2", "b2")
both$r.ave <- round((both$r1 + both$r2)/2)
both$g.ave <- round((both$g1 + both$g2)/2)
both$b.ave <- round((both$b1 + both$b2)/2)
both$ave <- paste(both$r.ave, both$g.ave, both$b.ave)
colors <- both$ave
colors <- sapply(strsplit(colors, " "),
function(colors) rgb(colors[1], colors[2], colors[3], maxColorValue = 255))
xy <- expand.grid(x=seq(1, 3, by=1), y=seq(1, 3, by=1))
grid <- cbind(xy, colors)
grid$colors <- as.character(grid$colors)
us_pov$hex_code <-
ifelse(us_pov$pov_rate<=qnt1_r & us_pov$pov_moe<=qnt1_m, colors[1],
ifelse(us_pov$pov_rate<=qnt1_r & us_pov$pov_moe<=qnt2_m, colors[4],
ifelse(us_pov$pov_rate<=qnt1_r & us_pov$pov_moe<=qnt3_m, colors[7],
ifelse(us_pov$pov_rate<=qnt2_r & us_pov$pov_moe<=qnt1_m, colors[2],
ifelse(us_pov$pov_rate<=qnt2_r & us_pov$pov_moe<=qnt2_m, colors[5],
ifelse(us_pov$pov_rate<=qnt2_r & us_pov$pov_moe<=qnt3_m, colors[8],
ifelse(us_pov$pov_rate<=qnt3_r & us_pov$pov_moe<=qnt1_m, colors[3],
ifelse(us_pov$pov_rate<=qnt3_r & us_pov$pov_moe<=qnt2_m, colors[6],
ifelse(us_pov$pov_rate<=qnt3_r & us_pov$pov_moe<=qnt3_m, colors[9], "NA")))))))))
colnames(us_pov)[1] <- "GEO_ID"
us@data <- left_join(us@data, us_pov, by="GEO_ID")
us@data$id <- rownames(us@data)
points <- fortify(us, region="id")
final_pov <- join(points, us@data, by="id")
terciles <- c(min(us_pov$pov_rate), qnt1_r, qnt2_r, qnt3_r,
min(us_pov$pov_moe), qnt1_m, qnt2_m, qnt3_m)
x <- c(.5, 1.5, 2.5, 3.5, 0, 0, 0, 0)
y <- c(0, 0, 0, 0, .5, 1.5, 2.5, 3.5)
angle <- c(-90, -90, -90, -90, 180, 180, 180, 180)
labels <- data.frame(x, y, terciles, angle)
labels$terciles <- as.character(labels$terciles)
color.grid <- ggplot() +
geom_tile(data=grid, aes(x=x, y=y, fill=colors), colour="black", size=.1) +
scale_fill_identity() +
scale_y_continuous(trans="reverse") +
coord_equal(ratio=1) +
geom_text(aes(x=-1, y=2, label="Margin of error \n (terciles)", angle=-90), size=2.5) +
geom_text(aes(x=2, y=-1, label="Poverty rate \n (terciles)", angle=180), size=2.5) +
geom_text(data=labels, aes(x=x, y=y, label=terciles, angle=angle), size=2.5) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),axis.title.y=element_blank(),
panel.background=element_blank())
states <- map_data("state")
map <- ggplot() +
geom_polygon(data=final_pov, aes(x=long, y=lat, group=group, fill=hex_code),
colour="black", size=.1) +
scale_fill_identity() +
labs(title="United States 2015 Poverty Map", subtitle = "Percentage of families whose income
was below the poverty level") +
geom_path(data=states, aes(x=long, y=lat, group=group), size=.3) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),axis.title.y=element_blank(),
panel.background=element_blank(), plot.title = element_text(size = 20),
plot.subtitle = element_text(size=15)) +
coord_equal(ratio=1.3)
cg <- editGrob(ggplotGrob(color.grid), vp=viewport(angle=135))
lay <- rbind(c(1,1,1,1,1),
c(1,1,1,1,1),
c(1,1,1,1,2),
c(1,1,1,1,1))
dev.new(dev.new())
plot <- grid.arrange(map, cg, layout_matrix=lay)
